https://ourairports.com/data/
Fifteen years ago, there were only a few skills a software developer would need to know well, and he or she would have a decent shot at 95% of the listed job positions. Those skills were:

Object-oriented programming.
Scripting languages.
JavaScript, and…
SQL.
SQL was a go-to tool when you needed to get a quick-and-dirty look at some data, and draw preliminary conclusions that might, eventually, lead to a report or an application being written. This is called exploratory analysis.

These days, data comes in many shapes and forms, and it’s not synonymous with “relational database” anymore. You may end up with CSV files, plain text, Parquet, HDF5, and who knows what else. This is where Pandas library shines.

What is Pandas?
Python Data Analysis Library, called Pandas, is a Python library built for data analysis and manipulation. It’s open-source and supported by Anaconda. It is particularly well suited for structured (tabular) data. For more information, see http://pandas.pydata.org/pandas-docs/stable/index.html.

What can I do with it?
All the queries that you were putting to the data before in SQL, and so many more things!

Great! Where do I start?
This is the part that can be intimidating for someone used to expressing data questions in SQL terms.

SQL is a declarative programming language: https://en.wikipedia.org/wiki/List_of_programming_languages_by_type#Declarative_languages.

With SQL, you declare what you want in a sentence that almost reads like English.

Pandas’ syntax is quite different from SQL. In Pandas, you apply operations on the dataset, and chain them, in order to transform and reshape the data the way you want it.

We’re going to need a phrasebook!

The anatomy of a SQL query
A SQL query consists of a few important keywords. Between those keywords, you add the specifics of what data, exactly, you want to see. Here is a skeleton query without the specifics:

SELECT… FROM… WHERE…

GROUP BY… HAVING…

ORDER BY…

LIMIT… OFFSET…

There are other terms, but these are the most important ones. So how do we translate these terms into Pandas?

First we need to load some data into Pandas, since it’s not already in database. Here is how:



Open data downloads
Data should be open and sharable.

OurAirports has RSS feeds for comments, CSV and HXL data downloads for geographical regions, and KML files for individual airports and personal airport lists (so that you can get your personal airport list any time you want).

Microsoft Excel users should read the special instructions below.

Downloads
Picture of a spreadsheet
For more intense work, we have a CSV-formatted data dump of all our airports, countries, and top-level administrative subdivisions (regions), which we update every night. You can download these files and open them with almost any spreadsheet program or import them into your own database. You can even use them to set up your own, competing airport web site if you'd like! We'd love you to give us credit, like we give credit to our sources, but you're not required to.

Terms of use
All data is released to the Public Domain, and comes with no guarantee of accuracy or fitness for use.

Datasets
For information about the columns and values in the datasets, please visit the data dictionary and map legend (for airport and navaid types).

Effective 3 November 2021, the download files are stored on GitHub, in the repository davidmegginson/ourairports-data. The old download links redirect to there. Cloning that repository is an alternative way to access the data.

airports.csv (11,216,441 bytes, last modified Feb 18, 2024)
Large file, containing information on all airports on this site.
airport-frequencies.csv (1,240,194 bytes, last modified Feb 18, 2024)
Large file, listing communication frequencies for the airports in airports.csv.
airport-comments.csv (4,437,564 bytes, last modified Feb 18, 2024)
Large file, listing member comments for the airports in airports.csv.
runways.csv (3,896,177 bytes, last modified Feb 18, 2024)
Large file, listing runways for the airports in airports.csv.
navaids.csv (1,526,164 bytes, last modified Feb 18, 2024)
Large file, listing worldwide radio navigation aids.
countries.csv (24,443 bytes, last modified Feb 18, 2024)
A list of the world's countries. You need this spreadsheet to interpret the country codes in the airports and navaids files.
regions.csv (478,674 bytes, last modified Feb 18, 2024)
A list of all countries' top-level administrative subdivisions (provinces, governorates, states, etc.). You need this spreadsheet to interpret the region codes in the airport file.
Workarounds for Microsoft Excel
The CSV files above use the Unicode UTF-8 character encoding to represent a wide range of non-English characters, such as Hellenic, Cyrillic, Han Chinese, and Arabic scripts, as well as accented Latin characters.

Unfortunately, Microsoft Excel does not detect the character encoding of CSV files, and does not allow you to specify the encoding when you open them, always assuming a proprietary Microsoft character encoding. As a result, if you simply open the CSV files in Excel, any non-English characters will be scrambled.

There are two workarounds available:

Create a new, blank spreadsheet first, then use Excel's text import tool to load the CSV file into the blank spreadsheet.
Rename the CSV file's extension to ".txt" before opening it with Excel.
In both cases, Excel will give you an opportunity to specify the field separator (",") and the character encoding ("UTF-8"), and then accented and other non-English characters should appear without problem.

These workarounds are not necessary for OpenOffice Calc, which always prompts for the character encoding when opening a CSV file (just choose "UTF-8").
